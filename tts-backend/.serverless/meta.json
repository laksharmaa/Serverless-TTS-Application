{
  "D:\\Dev\\Serverless-TTS-Test\\tts-backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.5",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "D:\\Dev\\Serverless-TTS-Test\\tts-backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "laksharmaa",
      "service": "serverless-microservices-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "ap-south-1",
        "environment": {
          "JWT_SECRET": "<REDACTED>",
          "S3_BUCKET_NAME": "polly-audiofiles-bucket"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:GetLayerVersion"
            ],
            "Resource": "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:DeleteItem",
              "dynamodb:Query"
            ],
            "Resource": [
              "arn:aws:dynamodb:ap-south-1:905418375464:table/Users",
              "arn:aws:dynamodb:ap-south-1:905418375464:table/SavedBlogs"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "polly:SynthesizeSpeech"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:GetObjectAttributes",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::polly-audiofiles-bucket/*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AuthServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-microservices-backend-dev-authService"
              }
            },
            "BlogServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-microservices-backend-dev-blogService"
              }
            },
            "SpeechServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-microservices-backend-dev-speechService"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-microservices-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-microservices-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-microservices-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:GetLayerVersion"
                          ],
                          "Resource": "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:ap-south-1:905418375464:table/Users",
                            "arn:aws:dynamodb:ap-south-1:905418375464:table/SavedBlogs"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "polly:SynthesizeSpeech"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:GetObjectAttributes",
                            "s3:ListBucket"
                          ],
                          "Resource": "arn:aws:s3:::polly-audiofiles-bucket/*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-microservices-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CommonLibsLambdaLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "Content": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-microservices-backend/dev/1728311118031-2024-10-07T14:25:18.031Z/commonLibs.zip"
                },
                "LayerName": "commonLibs",
                "Description": "Common libraries for all services (serverless-http, express, aws-sdk, bcryptjs, jsonwebtoken)",
                "CompatibleRuntimes": [
                  "nodejs18.x"
                ]
              }
            },
            "AuthServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-microservices-backend/dev/1728555895785-2024-10-10T10:24:55.785Z/serverless-microservices-backend.zip"
                },
                "Handler": "authService/authService.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "serverless-microservices-backend-dev-authService",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "S3_BUCKET_NAME": "polly-audiofiles-bucket"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
                ]
              },
              "DependsOn": [
                "AuthServiceLogGroup"
              ]
            },
            "BlogServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-microservices-backend/dev/1728555895785-2024-10-10T10:24:55.785Z/serverless-microservices-backend.zip"
                },
                "Handler": "blogService/blogService.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "serverless-microservices-backend-dev-blogService",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "S3_BUCKET_NAME": "polly-audiofiles-bucket"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
                ]
              },
              "DependsOn": [
                "BlogServiceLogGroup"
              ]
            },
            "SpeechServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-microservices-backend/dev/1728555895785-2024-10-10T10:24:55.785Z/serverless-microservices-backend.zip"
                },
                "Handler": "speechService/speechService.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "serverless-microservices-backend-dev-speechService",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "S3_BUCKET_NAME": "polly-audiofiles-bucket"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
                ]
              },
              "DependsOn": [
                "SpeechServiceLogGroup"
              ]
            },
            "AuthServiceLambdaVersionIskx8EQkDzT3ciSp5uDRFtgVpNYvgtiCqK0cWHEXALM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AuthServiceLambdaFunction"
                },
                "CodeSha256": "pxSx3bgXixu3HpjvPng6GdHqAD9X/BJTLcctZ7ERxHc="
              }
            },
            "BlogServiceLambdaVersionubUU4EtDBZpkpA8t86dollTVAELOEueEqOnJb7JRTm0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "BlogServiceLambdaFunction"
                },
                "CodeSha256": "pxSx3bgXixu3HpjvPng6GdHqAD9X/BJTLcctZ7ERxHc="
              }
            },
            "SpeechServiceLambdaVersionDA2Us9Zga0P4sK5vzVTxCK9K17Cq4Eein1ivGd5BSJM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SpeechServiceLambdaFunction"
                },
                "CodeSha256": "pxSx3bgXixu3HpjvPng6GdHqAD9X/BJTLcctZ7ERxHc="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-serverless-microservices-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceRegister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApi": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiSaveDashblog": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "save-blog",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashblogs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "get-blogs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashblog": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "get-blog",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashblogBlogidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApiGetDashblog"
                },
                "PathPart": "{blogId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiDeleteDashblog": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "delete-blog",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiSpeech": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "speech",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRegisterOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiSaveDashblogOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiSaveDashblog"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiGetDashblogsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashblogs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiGetDashblogBlogidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashblogBlogidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiDeleteDashblogOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDeleteDashblog"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiSpeechOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiSpeech"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRegisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiSaveDashblogPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiSaveDashblog"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "BlogServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "BlogServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiGetDashblogsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashblogs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "BlogServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "BlogServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiGetDashblogBlogidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashblogBlogidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "BlogServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "BlogServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiDeleteDashblogDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDeleteDashblog"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "BlogServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "BlogServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiSpeechPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiSpeech"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SpeechServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SpeechServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1728555888625": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodRegisterOptions",
                "ApiGatewayMethodLoginOptions",
                "ApiGatewayMethodApiSaveDashblogOptions",
                "ApiGatewayMethodApiGetDashblogsOptions",
                "ApiGatewayMethodApiGetDashblogBlogidVarOptions",
                "ApiGatewayMethodApiDeleteDashblogOptions",
                "ApiGatewayMethodApiSpeechOptions",
                "ApiGatewayMethodRegisterPost",
                "ApiGatewayMethodLoginPost",
                "ApiGatewayMethodApiSaveDashblogPost",
                "ApiGatewayMethodApiGetDashblogsGet",
                "ApiGatewayMethodApiGetDashblogBlogidVarGet",
                "ApiGatewayMethodApiDeleteDashblogDelete",
                "ApiGatewayMethodApiSpeechPost"
              ]
            },
            "AuthServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AuthServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "BlogServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "BlogServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SpeechServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SpeechServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "CommonLibsLambdaLayerQualifiedArn": {
              "Description": "Current Lambda layer version",
              "Value": {
                "Ref": "CommonLibsLambdaLayer"
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerQualifiedArn"
              }
            },
            "CommonLibsLambdaLayerHash": {
              "Description": "Current Lambda layer hash",
              "Value": "1cf8abec94d7523544aa8fa883c1df033bd3e3c7",
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerHash"
              }
            },
            "CommonLibsLambdaLayerS3Key": {
              "Description": "Current Lambda layer S3Key",
              "Value": "serverless/serverless-microservices-backend/dev/1728311118031-2024-10-07T14:25:18.031Z/commonLibs.zip",
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerS3Key"
              }
            },
            "AuthServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AuthServiceLambdaVersionIskx8EQkDzT3ciSp5uDRFtgVpNYvgtiCqK0cWHEXALM"
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-AuthServiceLambdaFunctionQualifiedArn"
              }
            },
            "BlogServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "BlogServiceLambdaVersionubUU4EtDBZpkpA8t86dollTVAELOEueEqOnJb7JRTm0"
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-BlogServiceLambdaFunctionQualifiedArn"
              }
            },
            "SpeechServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SpeechServiceLambdaVersionDA2Us9Zga0P4sK5vzVTxCK9K17Cq4Eein1ivGd5BSJM"
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-SpeechServiceLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-microservices-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "layers": {
        "commonLibs": {
          "path": "layers/common-libraries",
          "description": "Common libraries for all services (serverless-http, express, aws-sdk, bcryptjs, jsonwebtoken)",
          "compatibleRuntimes": [
            "nodejs18.x"
          ],
          "package": {
            "artifact": "D:\\Dev\\Serverless-TTS-Test\\tts-backend\\.serverless\\commonLibs.zip"
          },
          "artifactAlreadyUploaded": true
        }
      },
      "functions": {
        "authService": {
          "handler": "authService/authService.handler",
          "layers": [
            "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
          ],
          "events": [
            {
              "http": {
                "path": "register",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "serverless-microservices-backend-dev-authService",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AuthServiceLambdaVersionIskx8EQkDzT3ciSp5uDRFtgVpNYvgtiCqK0cWHEXALM"
        },
        "blogService": {
          "handler": "blogService/blogService.handler",
          "layers": [
            "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
          ],
          "events": [
            {
              "http": {
                "path": "api/save-blog",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "api/get-blogs",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "api/get-blog/{blogId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "api/delete-blog",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "serverless-microservices-backend-dev-blogService",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "BlogServiceLambdaVersionubUU4EtDBZpkpA8t86dollTVAELOEueEqOnJb7JRTm0"
        },
        "speechService": {
          "handler": "speechService/speechService.handler",
          "layers": [
            "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3"
          ],
          "events": [
            {
              "http": {
                "path": "api/speech",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "serverless-microservices-backend-dev-speechService",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SpeechServiceLambdaVersionDA2Us9Zga0P4sK5vzVTxCK9K17Cq4Eein1ivGd5BSJM"
        }
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: laksharmaa\r\nservice: serverless-microservices-backend # Name of your service\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: ap-south-1\r\n  environment:\r\n    JWT_SECRET: abcd1234 # Environment variable shared across all functions\r\n    S3_BUCKET_NAME: polly-audiofiles-bucket # The name of your S3 bucket\r\n  iamRoleStatements:\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - \"lambda:GetLayerVersion\" # Allow Lambda functions to retrieve the Layer version\r\n      Resource:\r\n        - \"arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:*\" # All versions of the Layer\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:DeleteItem\r\n        - dynamodb:Query\r\n      Resource:\r\n        - arn:aws:dynamodb:ap-south-1:905418375464:table/Users\r\n        - arn:aws:dynamodb:ap-south-1:905418375464:table/SavedBlogs\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - polly:SynthesizeSpeech\r\n      Resource: \"*\"\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - s3:PutObject\r\n        - s3:GetObject\r\n        - s3:GetObjectAttributes\r\n        - s3:ListBucket\r\n      Resource:\r\n        - arn:aws:s3:::polly-audiofiles-bucket/*\r\n\r\nlayers:\r\n  commonLibs:\r\n    path: layers/common-libraries # Path to your \"common-libraries\" folder\r\n    description: \"Common libraries for all services (serverless-http, express, aws-sdk, bcryptjs, jsonwebtoken)\"\r\n    compatibleRuntimes:\r\n      - nodejs18.x # Ensure this matches your runtime\r\n\r\nfunctions:\r\n  authService:\r\n    handler: authService/authService.handler\r\n    layers:\r\n      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3\r\n    events:\r\n      - http:\r\n          path: /register\r\n          method: post\r\n          cors:\r\n            origin: \"*\" # Allow all origins or restrict to your frontend domain\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false # If you are not using cookies\r\n      - http:\r\n          path: /login\r\n          method: post\r\n          cors:\r\n            origin: \"*\" # Allow all origins\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n            allowCredentials: false\r\n\r\n  blogService:\r\n    handler: blogService/blogService.handler\r\n    layers:\r\n      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3\r\n    events:\r\n      - http:\r\n          path: /api/save-blog\r\n          method: post\r\n          cors:\r\n            origin: \"*\" # Can restrict to specific domains if necessary\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n      - http:\r\n          path: /api/get-blogs\r\n          method: get\r\n          cors:\r\n            origin: \"*\" # Allow all origins\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n      - http:\r\n          path: /api/get-blog/{blogId}\r\n          method: get\r\n          cors:\r\n            origin: \"*\" # Allow all origins\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n      - http:\r\n          path: /api/delete-blog\r\n          method: delete\r\n          cors:\r\n            origin: \"*\" # Allow all origins\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n\r\n  speechService:\r\n    handler: speechService/speechService.handler\r\n    layers:\r\n      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3\r\n    events:\r\n      - http:\r\n          path: /api/speech\r\n          method: post\r\n          cors:\r\n            origin: \"*\" # Allow all origins\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n\r\n# plugins:\r\n#   - serverless-offline",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "6f8020ee250f8937454bf0f0b60e8aba",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "deb77537-4d64-49b3-b532-0d99c28e435e",
    "orgName": "laksharmaa",
    "userId": "mmlWw065ccTlq9VCyC",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "laksharmaa",
    "subscription": null,
    "userEmail": "lakshya_sharma@srmap.edu.in",
    "serviceProviderAwsRegion": "ap-south-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "905418375464",
    "projectType": "traditional",
    "versionSf": "4.4.5",
    "serviceProviderAwsCfStackName": "serverless-microservices-backend-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:ap-south-1:905418375464:stack/serverless-microservices-backend-dev/07341170-6d0d-11ef-ac3e-02a00db77fd5",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:905418375464:stack/serverless-microservices-backend-dev/07341170-6d0d-11ef-ac3e-02a00db77fd5",
    "serviceProviderAwsCfStackCreated": "2024-09-07T11:33:39.529Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-10T10:24:58.952Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CommonLibsLambdaLayerHash",
        "OutputValue": "1cf8abec94d7523544aa8fa883c1df033bd3e3c7",
        "Description": "Current Lambda layer hash",
        "ExportName": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerHash"
      },
      {
        "OutputKey": "CommonLibsLambdaLayerS3Key",
        "OutputValue": "serverless/serverless-microservices-backend/dev/1728311118031-2024-10-07T14:25:18.031Z/commonLibs.zip",
        "Description": "Current Lambda layer S3Key",
        "ExportName": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerS3Key"
      },
      {
        "OutputKey": "AuthServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:905418375464:function:serverless-microservices-backend-dev-authService:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-microservices-backend-dev-AuthServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SpeechServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:905418375464:function:serverless-microservices-backend-dev-speechService:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-microservices-backend-dev-SpeechServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://jpokwv20g2.execute-api.ap-south-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-serverless-microservices-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-microservices--serverlessdeploymentbuck-iviprmfkstag",
        "ExportName": "sls-serverless-microservices-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "CommonLibsLambdaLayerQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:905418375464:layer:commonLibs:20",
        "Description": "Current Lambda layer version",
        "ExportName": "sls-serverless-microservices-backend-dev-CommonLibsLambdaLayerQualifiedArn"
      },
      {
        "OutputKey": "BlogServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:905418375464:function:serverless-microservices-backend-dev-blogService:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-microservices-backend-dev-BlogServiceLambdaFunctionQualifiedArn"
      }
    ]
  }
}