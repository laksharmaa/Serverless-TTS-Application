# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: laksharmaa
service: serverless-microservices-backend # Name of your service

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  environment:
    JWT_SECRET: abcd1234 # Environment variable shared across all functions
    S3_BUCKET_NAME: polly-audiofiles-bucket # The name of your S3 bucket
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:GetLayerVersion" # Allow Lambda functions to retrieve the Layer version
      Resource:
        - "arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:*" # All versions of the Layer
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:ap-south-1:905418375464:table/Users
        - arn:aws:dynamodb:ap-south-1:905418375464:table/SavedBlogs
    - Effect: "Allow"
      Action:
        - polly:SynthesizeSpeech
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:GetObjectAttributes
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::polly-audiofiles-bucket/*

layers:
  commonLibs:
    path: layers/common-libraries # Path to your "common-libraries" folder
    description: "Common libraries for all services (serverless-http, express, aws-sdk, bcryptjs, jsonwebtoken)"
    compatibleRuntimes:
      - nodejs18.x # Ensure this matches your runtime

functions:
  authService:
    handler: authService/authService.handler
    layers:
      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3
    events:
      - http:
          path: /register
          method: post
          cors:
            origin: "*" # Allow all origins or restrict to your frontend domain
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false # If you are not using cookies
      - http:
          path: /login
          method: post
          cors:
            origin: "*" # Allow all origins
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  blogService:
    handler: blogService/blogService.handler
    layers:
      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3
    events:
      - http:
          path: /api/save-blog
          method: post
          cors:
            origin: "*" # Can restrict to specific domains if necessary
            headers:
              - Content-Type
              - Authorization
      - http:
          path: /api/get-blogs
          method: get
          cors:
            origin: "*" # Allow all origins
            headers:
              - Content-Type
              - Authorization
      - http:
          path: /api/get-blog/{blogId}
          method: get
          cors:
            origin: "*" # Allow all origins
            headers:
              - Content-Type
              - Authorization
      - http:
          path: /api/delete-blog
          method: delete
          cors:
            origin: "*" # Allow all origins
            headers:
              - Content-Type
              - Authorization

  speechService:
    handler: speechService/speechService.handler
    layers:
      - arn:aws:lambda:ap-south-1:905418375464:layer:common-libraries:3 # Updated to version 3
    events:
      - http:
          path: /api/speech
          method: post
          cors:
            origin: "*" # Allow all origins
            headers:
              - Content-Type
              - Authorization

# plugins:
#   - serverless-offline